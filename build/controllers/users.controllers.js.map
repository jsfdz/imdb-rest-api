{"version":3,"sources":["../../src/controllers/users.controllers.js"],"names":["getAllUsers","req","res","Users","findAll","raw","result","status","json","satusCode","data","message","getUser","id","params","findOne","where","createUser","body","firstName","lastName","email","password","resetToken","hashPassword","create","updateUser","update","deleteUser","destroy"],"mappings":"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","sourcesContent":["import { Users } from '../models/user.model'\r\nimport { hash } from 'bcrypt'\r\n\r\nexport const getAllUsers = async (req, res) => {\r\n  const result = await Users.findAll({ raw: true })\r\n  res.status(200).json({\r\n    satusCode: 200,\r\n    data: result,\r\n    message: 'List of Users'\r\n  })\r\n}\r\n\r\nexport const getUser = async (req, res) => {\r\n  const { id } = req.params\r\n  const result = await Users.findOne({ where: { id }, raw: true })\r\n  res.status(200).json({\r\n    satusCode: 200,\r\n    data: result,\r\n    message: 'Show User'\r\n  })\r\n}\r\n\r\nexport const createUser = async (req, res) => {\r\n  const { firstName, lastName, email, password, resetToken } = req.body\r\n  const hashPassword = await hash(password, 10)\r\n  await Users.create({ firstName, lastName, email, password: hashPassword, resetToken })\r\n  res.status(200).json({\r\n    satusCode: 200,\r\n    message: 'User Created'\r\n  })\r\n}\r\n\r\nexport const updateUser = async (req, res) => {\r\n  const { id } = req.params\r\n  const { firstName, lastName, email, password, resetToken } = req.body\r\n  const hashPassword = await hash(password, 10)\r\n  await Users.update({ firstName, lastName, email, password: hashPassword, resetToken }, { where: { id } })\r\n  res.status(200).json({\r\n    satusCode: 200,\r\n    message: 'User Updated'\r\n  })\r\n}\r\n\r\nexport const deleteUser = async (req, res) => {\r\n  const { id } = req.params\r\n  await Users.destroy({ where: { id } })\r\n  res.status(200).json({\r\n    satusCode: 200,\r\n    message: 'User Deleted'\r\n  })\r\n}\r\n"],"file":"users.controllers.js"}